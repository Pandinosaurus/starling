<!--
#
# STARLING PROJECT 
#
# LIRIS - Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information 
#
# Copyright: 2012 - 2015 Eric Lombardi (eric.lombardi@liris.cnrs.fr), LIRIS (liris.cnrs.fr), CNRS (www.cnrs.fr)
#
#
#    This program is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License version 3, as published
#    by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranties of
#    MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
#    PURPOSE.  See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    For further information, check the COPYING file distributed with this software.
#
-->    


<properties>

	<!-- legacy block parameters -->	

	<block type='13' id=''>
		<property name='_PATTERN_' value='image-%04d.png' desc='file name pattern' type='filename'/>
		<property name='_INDEXMIN_' value='1' desc='index min'/>
		<property name='_INDEXMAX_' value='50' desc='index max'/>
	</block>

	<!-- help -->	

	<help>
Reads images from files sequence.

Parameters:
 - pattern (string) : image files name pattern in "C printf" format ; must contain a %nnd statement, which will be replaced by a counter value varying from index min to index max ; example: image-%04d.png,
 - indexMin (int) : index minimum value,
 - indexMax (int) : index maximum value.
	</help>

	<!-- block description -->	

	<label>Read images sequence</label>
	<output id='1' type='cv::Mat'/>
	<isstream>true</isstream>
	<icon>images/acquisition.png</icon>
	<color>50:100:200:150</color>
	<description>Read images from file sequence</description>
	<treegroup>Input-Output</treegroup>
	
	<!-- informations for code generation -->	

	<includepath path=''/>

	<library name=''/>

	<librarypath path=''/>

	<includes>
		<![CDATA[
		]]>
	</includes>

	<functions>
		<![CDATA[
class ReadImagesSequence
{
public:
	ReadImagesSequence( const char* _fileNamePattern, int _indexMin, int _indexMax)
	{
		fileNamePattern = _fileNamePattern;
		indexMin = _indexMin;
		indexMax = _indexMax;
		counter = indexMin;
	}

	~ReadImagesSequence(void)  { };

	bool read(cv::Mat *out)
	{
		// build file name
		snprintf( fileName, sizeof(fileName), fileNamePattern, counter);

		// read image from file
		*out = cv::imread(fileName, -1);

		// check if counter has reached max value
		counter++;
		if( counter > indexMax )
			return false;
		
		return true;
	}
		
protected:
	const char *fileNamePattern;
	int indexMin;
	int indexMax;
	int counter;
	char fileName[1024];
};
		]]>
	</functions>
	
	<initializations>
		<![CDATA[
ReadImagesSequence imgSeq_block_BLOCKID_( "_PATTERN_", _INDEXMIN_, _INDEXMAX_);
		]]>
	</initializations>

	<processings>
		<![CDATA[
if( ! imgSeq_block_BLOCKID_.read(_OUTPUT1_) )
	goOn = false;
		]]>
	</processings>

	<cleanings>
		<![CDATA[
		]]>
	</cleanings>

</properties>

