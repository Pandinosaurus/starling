<!--
#
# STARLING PROJECT 
#
# LIRIS - Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information 
#
# Copyright: 2012 - 2015 Eric Lombardi (eric.lombardi@liris.cnrs.fr), LIRIS (liris.cnrs.fr), CNRS (www.cnrs.fr)
#
#
#    This program is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License version 3, as published
#    by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranties of
#    MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
#    PURPOSE.  See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    For further information, check the COPYING file distributed with this software.
#
-->    


<properties>
    <!-- block parameters -->    

    <block type='5014' id=''>
		<property name='_FILENAME_' value='resource/haarcascade_frontalface_alt.xml' type='filename' desc='file name'/>
        <property name='_SCALEFACTOR_' value='1.1' desc='scale factor'/>
        <property name='_MINNEIGHBORS_' value='3' desc='min neighbors'/>
        <property name='_FLAGS_' value='0' desc='flags'/>
        <property name='_MINSIZE_' value='cv::Size()' desc='min size'/>
        <property name='_MAXSIZE_' value='cv::Size()' desc='max size'/>
    </block>

    <!-- help -->    

    <help>
Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.

Parameters:	
 - scale factor (double): parameter specifying how much the image size is reduced at each image scale.
 - min neighbors (int) : parameter specifying how many neighbors each candidate rectangle should have to retain it.
 - flags (int): parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. It is not used for a new cascade.
 - min size (cv::Size): minimum possible object size. Objects smaller than that are ignored.
 - max size (cv::Size): maximum possible object size. Objects larger than that are ignored.

Inputs/outputs:
 - input1: input image.
 - output1 : object detection list.
	</help>

    <!-- block description -->    

    <label>CascadeClassifier</label>
    <input id='1' type='cv::Mat'/>
	<output id='1' type='std::vector&lt;cv::Rect&gt;'/>
    <isstream>false</isstream>
    <icon>images/opencv.png</icon>
    <color>50:100:200:150</color>
    <description>CascadeClassifier</description>
    <treegroup>Detection</treegroup>
    
    <!-- informations for code generation -->    

	<includepath path='' />

    <library name=''/>

    <librarypath path=''/>

    <includes>
        <![CDATA[
        ]]>
    </includes>

    <functions>
        <![CDATA[
void cascadeClassifierDetectMultiScale( cv::CascadeClassifier *classifier, const cv::Mat *in, std::vector<cv::Rect> *out1, double scaleFactor, int minNeighbors, int flags, const cv::Size& minSize, const cv::Size& maxSize)
{
	if( (! in) || (! in->data) )
		return;

	// run classifier
	classifier->detectMultiScale( *in, *out1, scaleFactor, minNeighbors, flags, minSize, maxSize);
}
        ]]>
    </functions>
    
    <initializations>
        <![CDATA[
cv::CascadeClassifier haarCascade_BLOCKID_("_FILENAME_");
        ]]>
    </initializations>

    <processings>
        <![CDATA[
cascadeClassifierDetectMultiScale( &haarCascade_BLOCKID_, _INPUT1_, _OUTPUT1_, _SCALEFACTOR_, _MINNEIGHBORS_, _FLAGS_, _MINSIZE_, _MAXSIZE_);
        ]]>
    </processings>

    <cleanings>
        <![CDATA[
        ]]>
    </cleanings>
</properties>

