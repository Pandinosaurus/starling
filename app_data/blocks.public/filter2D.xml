<!--
#
# STARLING PROJECT 
#
# LIRIS - Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information 
#
# Copyright: 2012 - 2015 Eric Lombardi (eric.lombardi@liris.cnrs.fr), LIRIS (liris.cnrs.fr), CNRS (www.cnrs.fr)
#
#
#    This program is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License version 3, as published
#    by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranties of
#    MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
#    PURPOSE.  See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    For further information, check the COPYING file distributed with this software.
#
-->    


<properties>
    <!-- block parameters -->    

    <block type='3029' id=''>
        <property name='_DDEPTH_' value='CV_32F' desc='destination depth' type='selector' values='-1;CV_8U; CV_16U;CV_16S;CV_32F;CV_64F'/>
        <property name='_KERNEL_SIZE_' value='3, 3' desc='kernel size'/>
        <property name='_KERNEL_VALUES_' value='1, 2, 3, 4, 5, 6, 7, 8, 9' desc='kernel values'/>
        <property name='_DELTA_' value='0' desc='delta'/>
        <property name='_BORDERTYPE_' value='cv::BORDER_DEFAULT' desc='border extrapolation' type='selector' values='cv::BORDER_REPLICATE;cv::BORDER_CONSTANT;cv::BORDER_REFLECT;cv::BORDER_REFLECT_101;cv::BORDER_WRAP;cv::BORDER_TRANSPARENT;cv::BORDER_DEFAULT;cv::BORDER_ISOLATED'/>
    </block>

    <!-- help -->    

    <help>
Convolves an image with the kernel.

Parameters:
 - destination depth (int / symbolic cst): output image depth ; only some combinations of source depth and output depth are supported, see opencv documentation at www.opencv.org. When destination depth = -1, the destination image will have the same depth as the source ; in the case of 8-bit input images it will result in truncated derivatives.
 - kernel size (list of ints): size of the kernel as a comma separated list.
 - kernel values (list of doubles): kernel values as a comma separated list, in row order.
 - delta (double): optional delta value that is added to the results prior to storing them in dst.
 - borderType (symbolic cst): pixel extrapolation method (see borderInterpolate() for details).

Inputs/Ouputs:
 - input1: input image.
 - output1: filtered image.
	</help>

    <!-- block description -->    

    <label>Filter 2D</label>
    <input id='1' type='cv::Mat' desc='input image'/>
    <output id='1' type='cv::Mat'/>
    <isstream>false</isstream>
    <icon>images/opencv.png</icon>
    <color>50:100:200:150</color>
    <description>Applies a linear filter to an image.</description>
    <treegroup>Filtering</treegroup>
    
    <!-- informations for code generation -->    

    <includepath path=''/>

    <library name=''/>

    <librarypath path=''/>

    <includes>
        <![CDATA[
        ]]>
    </includes>

    <functions>
        <![CDATA[
void lvFilter2D( const cv::Mat *in, int ddepth, const cv::Mat_<float> *kernel, double delta, int borderType, cv::Mat *out)
{
	if( in == NULL )
		return;
	
	cv::Point anchor( -1, -1);
	cv::filter2D( *in, *out, ddepth, *kernel, anchor, delta, borderType);
}
        ]]>
    </functions>
    
    <initializations>
        <![CDATA[
cv::Mat_<float> kernel_block_BLOCKID_( _KERNEL_SIZE_);
kernel_block_BLOCKID_ << _KERNEL_VALUES_;
        ]]>
    </initializations>

    <processings>
        <![CDATA[
lvFilter2D( _INPUT1_, _DDEPTH_, &kernel_block_BLOCKID_, _DELTA_, _BORDERTYPE_, _OUTPUT1_);
        ]]>
    </processings>

    <cleanings>
        <![CDATA[
        ]]>
    </cleanings>
</properties>

